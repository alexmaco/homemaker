# simple amanged object
# [[obj]]
# task = 'zt' <-- like 'name' but for, uh, tasks
# solution = 'cd ~/dotfiles/zt && git pull' <-- shell to execute
# dependencies = 'maim, slop' <-- dependencies - do them first. Valid values: any other tasks, need not be specified before this one, comma separated.

# [[obj]]  <-- required `obj` header for each managed object
# file = '.Xresources' <-- name
# source = '~/dotfiles/.Xresources' <-- for symlink/copy, source file location
# destination = '~/.Xresources' <-- for symlink/copy, destination
# method = 'symlink' <-- symlink or copy?. Valid values: symlink
# post = "xrdb ~/.Xresources" <-- a wee shell script to execute upon SUCCESSFUL symlink/copy
# force = 'true' <-- overwrite if file already exists. Valid values: true, false; unspecified defaults to false

# complex managed object

[[obj]]
file = '.neomuttrs'
source = '~/dotfiles/.neomuttrc'
destination = '~/.neomuttrc'
method = 'symlink'
force = 'true'

[[obj]]
file = '.Xresources'
source = '~/dotfiles/.Xresources'
destination = '~/.Xresources'
method = 'symlink'
post = "xrdb ~/.Xresources"
force = 'true'

[[obj]]
file = 'sway'
source = '~/dotfiles/.config/sway'
destination = '~/.config/sway'
method = 'symlink'

[[obj]]
file = 'rofi'
source = '~/dotfiles/.config/rofi'
destination = '~/.config/rofi'
method = 'symlink'

[[obj]]
file = 'tmux.conf'
source = '~/dotfiles/.tmux.conf'
destination = '~/.tmux.conf'
method = 'symlink'

[[obj]]
file = 'gtk2'
source = '~/dotfiles/.config/gtk-2.0'
destination = '~/.config/gtk-2.0'
method = 'symlink'
force = 'true'

[[obj]]
file = 'gtk3'
source = '~/dotfiles/.config/gtk-3.0'
destination = '~/.config/gtk-3.0'
method = 'symlink'
force = 'true'

[[obj]]
file = 'nvim'
source = '~/dotfiles/.config/nvim'
destination = '~/.config/nvim'
method = 'symlink'

[[obj]]
file = 'fish'
source = '~/dotfiles/.config/fish'
destination = '~/.config/fish'
method = 'symlink'

[[obj]]
task = 'zt'
solution = 'cd ~/dotfiles/zt && git pull'
dependencies = 'maim, slop'

[[obj]]
task = 'slop'
source = '~/dotfiles/zt/slop'
solution = 'cd ~/dotfiles/zt/slop; make clean; cmake -DCMAKE_INSTALL_PREFIX="/usr" ./ && make && sudo make install'
method = 'execute'

[[obj]]
task = 'maim'
source = '~/dotfiles/zt/maim'
solution = 'cd ~/dotfiles/zt/maim; make clean; cmake -DCMAKE_INSTALL_PREFIX="/usr" ./ && make && sudo make install'
method = 'execute'
dependencies = 'maim_dependencies'

[[obj]]
task = 'maim_dependencies'
solution = 'sudo apt install -y libxfixes-dev libglm-dev libxrandr-dev libglew-dev libegl1-mesa-dev libxcomposite-dev'
# os should be of the format either `windows` or `linux::<distro>`
os = "linux::debian"

[[obj]]
task = 'windows only'
solution = 'rustup update'
os = 'windows'

[[obj]]
task = 'rustup update'
solution = 'rustup update'
method = 'execute'

[[obj]]
task = 'loop_detection'
solution = 'echo HI'
#dependencies = 'maim_dependencies'

[[obj]]
task = 'playerctl dependencies'
solution = 'sudo dnf -y install meson'
os = "linux::fedora"

[[obj]]
task = 'playerctl install'
solution = 'mkdir -p ~/src; cd ~/src/; git clone https://github.com/altdesktop/playerctl.git ; cd playerctl; meson -Dgtk-doc=false mesonbuild && sudo ninja -C mesonbuild install'
dependencies = 'playerctl dependencies'
